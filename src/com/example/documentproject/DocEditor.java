package com.example.documentproject;

import java.util.Date;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.example.documentproject.bean.EntityData;
import com.example.documentproject.bean.Status;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;

public class DocEditor extends CustomComponent {

    private final Logger LOG = LoggerFactory.getLogger( getClass() );

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    @AutoGenerated
    private AbsoluteLayout mainLayout;

    @AutoGenerated
    private Table table_1;

    @AutoGenerated
    private ComboBox comboBox_1;

    @AutoGenerated
    private Button button_1;

    @AutoGenerated
    private Label label_1;

    private static final long serialVersionUID = 1L;

    private BeanItemContainer<EntityData> dataSource = new BeanItemContainer<EntityData>( EntityData.class );

    private BeanItemContainer<Status> comboDataSource = new BeanItemContainer<Status>( Status.class );

    /**
     * The constructor should first build the main layout, set the composition root and then do any custom
     * initialization.
     *
     * The constructor will not be automatically regenerated by the visual editor.
     */
    public DocEditor() {

        buildMainLayout();
        setCompositionRoot( mainLayout );

    }

    @SuppressWarnings( "serial" )
    @AutoGenerated
    private AbsoluteLayout buildMainLayout() {

        // common part: create layout
        mainLayout = new AbsoluteLayout();
        mainLayout.setImmediate( false );
        mainLayout.setSizeFull();

        // top-level component properties
        setWidth( "100.0%" );
        setHeight( "100.0%" );

        initTableData();

        // table_1
        table_1 = new Table( "", this.dataSource );
        table_1.setImmediate( false );
        table_1.setWidth( "420px" );
        table_1.setHeight( "581px" );

        table_1.setColumnHeader( "date", "Дата" );
        table_1.setColumnHeader( "id", "Номер" );
        table_1.setColumnHeader( "status", "Статус" );

        table_1.setSelectable( true );

        mainLayout.addComponent( table_1, "top:30.0px;left:20.0px;" );

        // label_1
        label_1 = new Label();
        label_1.setImmediate( false );
        label_1.setWidth( "250px" );
        label_1.setHeight( "-1px" );
        label_1.setValue( "Подсветить строку со статусом:" );
        mainLayout.addComponent( label_1, "top:30.0px;left:464.0px;" );

        // comboBox_1
        comboBox_1 = new ComboBox();
        comboBox_1.setImmediate( false );
        comboBox_1.setWidth( "200px" );
        comboBox_1.setHeight( "-1px" );

        initSelect();

        mainLayout.addComponent( comboBox_1, "top:30.0px;left:710.0px;" );

        // button_1
        button_1 = new Button();
        button_1.setCaption( "ok" );
        button_1.setImmediate( true );
        button_1.setWidth( "70px" );
        button_1.setHeight( "-1px" );
        button_1.addClickListener( new ClickListener() {

            @Override
            public void buttonClick( ClickEvent event ) {

                LOG.debug( "Button clicked" );
                selectTableRow( (Status) comboBox_1.getValue() );
                LOG.debug( "selected combo={}", comboBox_1.getValue() );

            }
        } );
        mainLayout.addComponent( button_1, "top:30.0px;left:950.0px;" );

        return mainLayout;
    }

    /** 
     * 
     */
    private void selectTableRow( Status status ) {

        for (int i = 0; i < this.dataSource.size(); i++) {
            //        table_1.select( this.dataSource.indexOfId( itemId ) );
            EntityData entityTmp = this.dataSource.getIdByIndex( i );
            if ( entityTmp.getStatus() != null && entityTmp.getStatus().equals( status.getValue() ) ) {
                table_1.select( entityTmp );
                LOG.debug( "Status={}", entityTmp.getStatus() );
            }

        }
    }

    /** 
     * 
     */
    private void initSelect() {

        for (Status item : Status.values()) {
            comboBox_1.addItem( item );
            comboBox_1.setItemCaption( item, item.getValue() );
        }
    }

    /** 
     * 
     */
    private void initTableData() {

        // init data for table 
        int i = 1;
        for (Status enumItem : Status.values()) {
            this.dataSource.addBean( new EntityData( i++, new Date(), enumItem ) );
        }
    }
}
